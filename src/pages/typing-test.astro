---
import Layout from '../layouts/Layout.astro';
import MainContent from '../components/MainContent.astro';
import Collapsible from '../components/Collapsible.astro';
const title = 'Typing Test';
const description = 'Test de velocidad de escritura';
---

<Layout title={title} description={description}>
  <MainContent>
    <h1
      class="mb-12 text-center text-4xl lg:text-7xl font-bold bg-gradient-to-r from-red-500 to-yellow-400 text-transparent bg-clip-text"
    >
      Typing Test
    </h1>
    <h2 id="status" class="mb-6 text-xl lg:text-3xl text-center text-neutral-300"></h2>
    <section id="typingTest" class="relative my-6 p-6 lg:my-16">
      <time id="timer" class="block mb-6 text-2xl lg:text-3xl text-orange-400"
      ></time>
      <input
        aria-label="Test input"
        id="userInput"
        autofocus
        class="absolute scale-0 top-0 -z-50 pointer-events-none border"
        type="text"
        autocomplete="off"
        autocapitalize="off"
        autocorrect="off"
        data-gramm="false"
        data-gramm_editor="false"
        data-enable-grammarly="false"
        spellcheck="false"
      />
      <div
        id="words"
        translate="no"
        class="mb-16 w-full flex flex-wrap text-2xl gap-3 text-neutral-500 select-none"
      >
      </div>
      <div class="my-6 flex justify-center gap-4">
        <button
          aria-label="Restart game"
          type="button"
          id="restartBtn"
          class="p-2 rounded-full hover:cursor-pointer hover:bg-neutral-800"
        >
          <svg
            class="block w-6 h-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2.4"
              d="M21 3v5m0 0h-5m5 0-3-2.708A9 9 0 1 0 20.777 14"></path>
          </svg>
        </button>
        <button
          aria-label="Toggle language"
          type="button"
          id="toggleLangBtn"
          class="p-2 rounded hover:cursor-pointer hover:bg-neutral-800"
        >
          ENGLISH
        </button>
      </div>
      <div
        id="results"
        class="hidden flex-col lg:flex-row justify-center gap-4"
      >
        <h3 class="mb-6 text-xl lg:text-3xl">Stats</h3>
        <p id="grossWpm" class="text-lg lg:text-2xl">
          Palabras por minuto (Gross WPM): <span id="grossWpmValue">0</span>
        </p>
        <p id="netWpm" class="text-lg lg:text-2xl">
          Palabras por minuto netas (Net WPM): <span id="netWpmValue">0</span>
        </p>
        <p id="cpm" class="text-lg lg:text-2xl">
          Caracteres por minuto (CPM): <span id="cpmValue">0</span>
        </p>
        <p id="acc" class="text-lg lg:text-2xl">
          Precisión (ACC): <span id="accValue">0</span>%
        </p>
      </div>
    </section>
    <Collapsible title="Descripción">
      <p class="p-6">
        Este proyecto permite probar la velocidad de escritura del usuario.
        <br />
        <br />
        Detecta la entrada del usuario y la compara con el texto original para detectar
        aciertos y errores de escritura, calculando las palabras por minuto (WPM),
        caracteres por minuto (CPM) y la precisión (ACC), mostrando el resultado
        en la pantalla.
        <br />
        <br />
        Permite reinicar el juego a través del botón "Restart game". Cuenta con un conjunto
        de las palabras más comunes en español e inglés, y permite cambiar el idioma
        a través del botón "Toggle Language".
      </p>
    </Collapsible>
  </MainContent>
</Layout>

<script>
  import { englishWords, spanishWords } from '@/data/words';
  const $input = document.getElementById('userInput') as HTMLInputElement;
  const $status = document.getElementById('status') as HTMLHeadingElement;
  const $words = document.getElementById('words') as HTMLDivElement;
  const $timer = document.getElementById('timer') as HTMLTimeElement;
  const $results = document.getElementById('results') as HTMLDivElement;
  const $grossWpm = document.getElementById('grossWpmValue') as HTMLSpanElement;
  const $netWpm = document.getElementById('netWpmValue') as HTMLSpanElement;
  const $cpm = document.getElementById('cpmValue') as HTMLSpanElement;
  const $acc = document.getElementById('accValue') as HTMLSpanElement;

  const $restartBtn = document.getElementById(
    'restartBtn'
  ) as HTMLButtonElement;
  const $toggleLangBtn = document.getElementById(
    'toggleLangBtn'
  ) as HTMLButtonElement;
  const INITIAL_TIME = 30;
  const TEXT_LENGTH = 32;

  let INITIAL_WORDS = spanishWords;
  let currentLanguage = 'spanish';

  let currentTime = INITIAL_TIME;
  let gameIsRunning = false;
  let timerIntervalId: ReturnType<typeof setInterval> | null = null;
  let startTime = 0;

  function setStatusText(message: string) {
    $status.textContent = message;
  }

  function addWordsWithLetters(text: string) {
    const wordsArray = text.split(' ');

    wordsArray.forEach((word: string, wordIndex: number) => {
      const wordDiv = document.createElement('div');
      wordDiv.classList.add('word');
      wordDiv.dataset.wordIndex = wordIndex.toString();

      word.split('').forEach((letter: string, letterIndex: number) => {
        const letterSpan = document.createElement('span');
        letterSpan.classList.add('letter');
        letterSpan.textContent = letter;
        letterSpan.dataset.letterIndex = letterIndex.toString();
        wordDiv.appendChild(letterSpan);
      });

      if ($words) $words.appendChild(wordDiv);
    });
  }

  function initGame() {
    const testWords = INITIAL_WORDS.toSorted(() => Math.random() - 0.5)
      .slice(0, TEXT_LENGTH)
      .join(' ');
    currentTime = INITIAL_TIME;

    $timer.textContent = currentTime.toString();

    addWordsWithLetters(testWords);

    const $firstWord = $words.querySelector('.word') as HTMLDivElement;
    $firstWord.classList.add('active');
    $firstWord.querySelector('.letter')?.classList.add('active');
  }

  function initTimer() {
    if (timerIntervalId) clearInterval(timerIntervalId);
    timerIntervalId = setInterval(() => {
      currentTime--;
      $timer.textContent = currentTime.toString();

      if (currentTime === 0 || !gameIsRunning) {
        clearInterval(timerIntervalId!);
        timerIntervalId = null;
        gameIsRunning = false;
        gameOver();
      }
    }, 1000);
  }

  function toggleLanguage() {
    if (currentLanguage === 'spanish') {
      INITIAL_WORDS = englishWords;
      currentLanguage = 'english';
      $toggleLangBtn.textContent = 'ESPAÑOL';
    } else {
      INITIAL_WORDS = spanishWords;
      currentLanguage = 'spanish';
      $toggleLangBtn.textContent = 'ENGLISH';
    }
    gameOver();
    startGame();
  }

  function initEvents() {
    $input.addEventListener('keydown', onKeyDown);
    $input.addEventListener('input', onInput);
    $words.addEventListener('click', () => $input.focus());
    $restartBtn.addEventListener('click', restartGame);
    $restartBtn.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        restartGame();
      }
    });
    $toggleLangBtn.addEventListener('click', toggleLanguage);
  }

  function onKeyDown(event: KeyboardEvent) {
    if (!gameIsRunning) return;
    const $currentWord = $words.querySelector('.word.active') as HTMLDivElement;
    const $currentLetter = $currentWord.querySelector(
      '.letter.active'
    ) as HTMLSpanElement;

    const { key } = event;
    if (key === ' ') {
      event.preventDefault();

      if ($input.value.length === 0) return;

      const $nextWord = $currentWord.nextElementSibling as HTMLDivElement;
      const $nextLetter = $nextWord.querySelector('.letter') as HTMLSpanElement;

      $currentWord.classList.remove('active');
      $currentLetter.classList.remove('active');

      $nextWord.classList.add('active');
      $nextLetter.classList.add('active');

      $input.value = '';

      const hasMissingLetter =
        $currentWord.querySelectorAll('.letter:not(.correct)').length > 0;
      const classToAdd = hasMissingLetter ? 'wrong' : 'correct';
      $currentWord.classList.add(classToAdd);
      return;
    }

    if (key === 'Backspace') {
      const $prevWord = $currentWord.previousElementSibling as HTMLDivElement;
      const $prevLetter =
        $currentLetter.previousElementSibling as HTMLSpanElement;

      if (!$prevWord && !$prevLetter) {
        event.preventDefault();
        return;
      }
    }
  }

  function onInput() {
    const $currentWord = $words.querySelector('.word.active') as HTMLDivElement;
    const $currentLetter = $currentWord.querySelector(
      '.letter.active'
    ) as HTMLSpanElement;

    const currentWord = $currentWord.innerText.trim();
    $input.maxLength = currentWord.length;
    // console.log({ value: $input.value, currentWord });

    const $allLetters = $currentWord.querySelectorAll(
      '.letter'
    ) as NodeListOf<HTMLSpanElement>;

    $allLetters.forEach(($letter) =>
      $letter.classList.remove('correct', 'wrong')
    );

    $input.value.split('').forEach((char, index) => {
      const $currentLetter = $allLetters[index];
      const letterToCompare = currentWord[index];

      const isCorrect = char === letterToCompare;
      $currentLetter.classList.add(isCorrect ? 'correct' : 'wrong');
    });

    $currentLetter.classList.remove('active');
    const currentInputLength = $input.value.length;
    const $nextActiveLetter = $allLetters[currentInputLength];

    if ($nextActiveLetter) {
      $nextActiveLetter.classList.add('active');
    } else {
      $currentLetter.classList.add('active');
    }

    const currentWordIndex = Number($currentWord.dataset.wordIndex);
    const isLastWord = currentWordIndex === $words.children.length - 1;
    if (isLastWord && $input.value.length === currentWord.length) {
      gameOver();
    }
  }

  function startGame() {
    startTime = Date.now();
    gameIsRunning = true;
    $input.focus();
    $results.classList.add('hidden');
    initTimer();
    initGame();
    setStatusText('¡Comienza a escribir!');
  }

  function gameOver() {
    const endTime = Date.now();
    const timeSpentSeconds = Math.max(
      1,
      Math.round((endTime - startTime) / 1000)
    );

    const { grossWpm, netWpm, cpm, accuracy } = getStats(timeSpentSeconds);

    setStatusText('Juego terminado');

    $grossWpm.textContent = grossWpm.toString();
    $netWpm.textContent = netWpm.toString();
    $cpm.textContent = cpm.toString();
    $acc.textContent = accuracy.toString();

    $results.classList.remove('hidden');

    gameIsRunning = false;
    if (timerIntervalId) {
      clearInterval(timerIntervalId);
      timerIntervalId = null;
    }
    $input.value = '';
    $words.innerHTML = '';
    $timer.textContent = INITIAL_TIME.toString();
    currentTime = INITIAL_TIME;
    console.log('game over');
  }

  function restartGame() {
    gameOver();
    startGame();
  }

  function getIncorrectWords() {
    let totalIncorrectWords = 0;
    const $incorrectWors = $words.querySelectorAll('.word.wrong');
    $incorrectWors.forEach(($wordDiv) => {
      totalIncorrectWords++;
    });

    return totalIncorrectWords;
  }

  function getCorrectCharsAndWords() {
    let correctChars = 0;
    let correctWords = 0;
    const wordDivs = $words.querySelectorAll('.word');
    wordDivs.forEach(($wordDiv) => {
      const letters = $wordDiv.querySelectorAll('.letter');
      let wordIsCorrect = true;
      letters.forEach(($letter) => {
        if ($letter.classList.contains('correct')) {
          correctChars++;
        } else {
          wordIsCorrect = false;
        }
      });
      if (wordIsCorrect) correctWords++;
    });
    return { correctChars, correctWords };
  }

  function getTotalTypedChars() {
    let totalChars = 0;
    let totalCharNSpaces = 0;
    let totalSpaces = 0;
    const $wordDivs = $words.querySelectorAll('.word');

    $wordDivs.forEach(($wordDiv) => {
      if (
        $wordDiv.classList.contains('correct') ||
        $wordDiv.classList.contains('wrong')
      ) {
        totalSpaces++;
      }
      const $letters = $wordDiv.querySelectorAll('.letter');
      $letters.forEach(($letter) => {
        if (
          $letter.classList.contains('correct') ||
          $letter.classList.contains('wrong')
        ) {
          totalChars++;
        }
      });
    });
    totalCharNSpaces += totalChars;
    totalCharNSpaces += totalSpaces;
    return { totalChars, totalCharNSpaces };
  }

  function getStats(timeSpentSeconds: number) {
    const incorrectWords = getIncorrectWords();
    const { correctChars } = getCorrectCharsAndWords();
    const { totalChars, totalCharNSpaces } = getTotalTypedChars();
    const minutes = timeSpentSeconds / 60;
    const grossWpm = Math.round(totalCharNSpaces / (5 * minutes));
    const netWpm =
      minutes > 0 ? Math.round(grossWpm - incorrectWords / minutes) : 0;
    const cpm = minutes > 0 ? Math.round(correctChars / minutes) : 0;
    const accuracy =
      totalChars > 0 ? Math.round((correctChars / totalChars) * 100) : 0;
    console.log({
      totalChars,
      correctChars,
      incorrectWords,
      minutes,
      grossWpm,
      netWpm,
      cpm,
      accuracy,
    });
    return { grossWpm, netWpm, cpm, accuracy };
  }

  setStatusText('Comienza a escribir');
  initEvents();
  startGame();
</script>
